# Generated by Django 4.2.20 on 2025-08-13 23:21

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='diretoriaensino',
            options={'verbose_name': 'Dept. de Educação', 'verbose_name_plural': 'Dept. de Educação'},
        ),
        migrations.CreateModel(
            name='AlunoResponsaveis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mae_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome completo da mãe')),
                ('pai_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome completo do pai')),
                ('responsavel_legal_nome', models.CharField(blank=True, max_length=100, null=True)),
                ('telefone_principal', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('telefone_reserva', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('email_responsavel', models.EmailField(blank=True, help_text='Preencha apenas se desejar registrar o e-mail.', max_length=254, null=True)),
                ('guarda_judicial', models.BooleanField(default=False, verbose_name='Guarda judicial?')),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='responsaveis', to='core.aluno')),
            ],
            options={
                'verbose_name': 'Responsáveis',
                'verbose_name_plural': 'Responsáveis',
            },
        ),
        migrations.CreateModel(
            name='AlunoPessoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_social', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome social (se houver)')),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1, null=True)),
                ('raca_cor', models.CharField(blank=True, choices=[('branca', 'Branca'), ('preta', 'Preta'), ('parda', 'Parda'), ('amarela', 'Amarela'), ('indigena', 'Indígena'), ('nao_informado', 'Prefiro não informar')], max_length=20, null=True, verbose_name='Raça/Cor (autodeclarada)')),
                ('nacionalidade', models.CharField(blank=True, max_length=60, null=True)),
                ('naturalidade_cidade', models.CharField(blank=True, max_length=80, null=True)),
                ('naturalidade_uf', models.CharField(blank=True, choices=[('AC', 'AC'), ('AL', 'AL'), ('AP', 'AP'), ('AM', 'AM'), ('BA', 'BA'), ('CE', 'CE'), ('DF', 'DF'), ('ES', 'ES'), ('GO', 'GO'), ('MA', 'MA'), ('MT', 'MT'), ('MS', 'MS'), ('MG', 'MG'), ('PA', 'PA'), ('PB', 'PB'), ('PR', 'PR'), ('PE', 'PE'), ('PI', 'PI'), ('RJ', 'RJ'), ('RN', 'RN'), ('RS', 'RS'), ('RO', 'RO'), ('RR', 'RR'), ('SC', 'SC'), ('SP', 'SP'), ('SE', 'SE'), ('TO', 'TO')], max_length=2, null=True)),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, validators=[django.core.validators.RegexValidator(message="O CPF deve estar no formato: '123.456.789-00'.", regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='Número do CPF')),
                ('rg_numero', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número do RG')),
                ('rg_orgao_emissor', models.CharField(blank=True, max_length=20, null=True, verbose_name='Órgão emissor do RG')),
                ('certidao_nascimento', models.TextField(blank=True, help_text='Número, livro, folha, cartório, etc.', null=True)),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pessoal', to='core.aluno')),
            ],
            options={
                'verbose_name': 'Dados Pessoais',
                'verbose_name_plural': 'Dados Pessoais',
            },
        ),
        migrations.CreateModel(
            name='AlunoEscolar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_matricula', models.CharField(max_length=30, unique=True, verbose_name='Número de matrícula')),
                ('ano_serie_atual', models.CharField(max_length=20, verbose_name='Ano/Série atual')),
                ('turno', models.CharField(blank=True, choices=[('manhã', 'Manhã'), ('tarde', 'Tarde'), ('noite', 'Noite'), ('integral', 'Integral')], max_length=10, null=True)),
                ('etapa_ensino', models.CharField(blank=True, choices=[('EI', 'Educação Infantil'), ('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio')], max_length=2, null=True)),
                ('historico_escolar', models.TextField(blank=True, help_text='Escolas anteriores, anos cursados, aprovação/reprovação.', null=True)),
                ('situacao_matricula', models.CharField(choices=[('ativa', 'Ativa'), ('transferido', 'Transferido'), ('trancado', 'Trancado'), ('egresso', 'Egresso'), ('cancelado', 'Cancelado')], default='ativa', max_length=15)),
                ('data_ingresso', models.DateField(blank=True, null=True)),
                ('data_saida', models.DateField(blank=True, null=True)),
                ('numero_chamada', models.PositiveIntegerField(blank=True, null=True)),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='escolar', to='core.aluno')),
                ('turma_atual', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos_atual', to='core.turma')),
                ('unidade_escolar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.escola')),
            ],
            options={
                'verbose_name': 'Dados Escolares',
                'verbose_name_plural': 'Dados Escolares',
            },
        ),
        migrations.CreateModel(
            name='AlunoContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logradouro', models.CharField(blank=True, max_length=150, null=True)),
                ('numero', models.CharField(blank=True, max_length=20, null=True)),
                ('complemento', models.CharField(blank=True, max_length=60, null=True)),
                ('bairro', models.CharField(blank=True, max_length=60, null=True)),
                ('cidade', models.CharField(blank=True, max_length=80, null=True)),
                ('uf', models.CharField(blank=True, choices=[('AC', 'AC'), ('AL', 'AL'), ('AP', 'AP'), ('AM', 'AM'), ('BA', 'BA'), ('CE', 'CE'), ('DF', 'DF'), ('ES', 'ES'), ('GO', 'GO'), ('MA', 'MA'), ('MT', 'MT'), ('MS', 'MS'), ('MG', 'MG'), ('PA', 'PA'), ('PB', 'PB'), ('PR', 'PR'), ('PE', 'PE'), ('PI', 'PI'), ('RJ', 'RJ'), ('RN', 'RN'), ('RS', 'RS'), ('RO', 'RO'), ('RR', 'RR'), ('SC', 'SC'), ('SP', 'SP'), ('SE', 'SE'), ('TO', 'TO')], max_length=2, null=True)),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='CEP deve estar no formato 99999-999 ou 99999999.', regex='^\\d{5}-?\\d{3}$')])),
                ('telefone_residencial', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('celular_aluno', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('email_aluno', models.EmailField(blank=True, help_text='Preencha apenas se desejar registrar o e-mail.', max_length=254, null=True)),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contato', to='core.aluno')),
            ],
            options={
                'verbose_name': 'Contato',
                'verbose_name_plural': 'Contatos',
            },
        ),
        migrations.CreateModel(
            name='AlunoComplementar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programa_bolsa_familia', models.BooleanField(default=False, verbose_name='Participa do Bolsa Família?')),
                ('programa_peti', models.BooleanField(default=False, verbose_name='Participa do PETI?')),
                ('acesso_internet_casa', models.BooleanField(default=True, verbose_name='Tem acesso à internet em casa?')),
                ('dispositivo_para_estudos', models.CharField(blank=True, help_text='Computador, celular, tablet, etc.', max_length=40, null=True)),
                ('transporte_escolar', models.BooleanField(default=False, verbose_name='Usa transporte escolar?')),
                ('religiao', models.CharField(blank=True, max_length=60, null=True, verbose_name='Religião (opcional)')),
                ('autoriza_uso_imagem', models.BooleanField(default=False, verbose_name='Autoriza uso de imagem?')),
                ('aluno', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='complementar', to='core.aluno')),
            ],
            options={
                'verbose_name': 'Dados Complementares',
                'verbose_name_plural': 'Dados Complementares',
            },
        ),
    ]
