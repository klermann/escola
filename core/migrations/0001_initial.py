# Generated by Django 4.2.20 on 2025-09-02 19:58

import core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('ativo', models.BooleanField(default=True)),
                ('ra', models.CharField(help_text='Formato: 0000 + 9 dígitos + 1 dígito/X', max_length=14, unique=True, validators=[core.models.validate_ra])),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('quilombola', models.BooleanField(default=False, verbose_name='Quilombola')),
            ],
        ),
        migrations.CreateModel(
            name='AlunoComplementar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('programa_bolsa_familia', models.BooleanField(default=False, verbose_name='Participa do Bolsa Família?')),
                ('programa_peti', models.BooleanField(default=False, verbose_name='Participa do PETI?')),
                ('acesso_internet_casa', models.BooleanField(default=True, verbose_name='Tem acesso à internet em casa?')),
                ('dispositivo_para_estudos', models.CharField(blank=True, help_text='Computador, celular, tablet, etc.', max_length=40, null=True)),
                ('transporte_escolar', models.BooleanField(default=False, verbose_name='Usa transporte escolar?')),
                ('religiao', models.CharField(blank=True, max_length=60, null=True, verbose_name='Religião (opcional)')),
                ('autoriza_uso_imagem', models.BooleanField(default=False, verbose_name='Autoriza uso de imagem?')),
            ],
            options={
                'verbose_name': 'Dados Complementares',
                'verbose_name_plural': 'Dados Complementares',
            },
        ),
        migrations.CreateModel(
            name='AlunoContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logradouro', models.CharField(blank=True, max_length=150, null=True)),
                ('numero', models.CharField(blank=True, max_length=20, null=True)),
                ('complemento', models.CharField(blank=True, max_length=60, null=True)),
                ('bairro', models.CharField(blank=True, max_length=60, null=True)),
                ('cidade', models.CharField(blank=True, max_length=80, null=True)),
                ('uf', models.CharField(blank=True, choices=[('AC', 'AC'), ('AL', 'AL'), ('AP', 'AP'), ('AM', 'AM'), ('BA', 'BA'), ('CE', 'CE'), ('DF', 'DF'), ('ES', 'ES'), ('GO', 'GO'), ('MA', 'MA'), ('MT', 'MT'), ('MS', 'MS'), ('MG', 'MG'), ('PA', 'PA'), ('PB', 'PB'), ('PR', 'PR'), ('PE', 'PE'), ('PI', 'PI'), ('RJ', 'RJ'), ('RN', 'RN'), ('RS', 'RS'), ('RO', 'RO'), ('RR', 'RR'), ('SC', 'SC'), ('SP', 'SP'), ('SE', 'SE'), ('TO', 'TO')], max_length=2, null=True)),
                ('cep', models.CharField(blank=True, max_length=9, null=True, validators=[django.core.validators.RegexValidator(message='CEP deve estar no formato 99999-999 ou 99999999.', regex='^\\d{5}-?\\d{3}$')])),
                ('telefone_residencial', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('celular_aluno', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('email_aluno', models.EmailField(blank=True, help_text='Preencha apenas se desejar registrar o e-mail.', max_length=254, null=True)),
            ],
            options={
                'verbose_name': 'Contato',
                'verbose_name_plural': 'Contatos',
            },
        ),
        migrations.CreateModel(
            name='AlunoEscolar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_matricula', models.CharField(max_length=30, unique=True, verbose_name='Número de matrícula')),
                ('ano_serie_atual', models.CharField(max_length=20, verbose_name='Ano/Série atual')),
                ('turno', models.CharField(blank=True, choices=[('manhã', 'Manhã'), ('tarde', 'Tarde'), ('noite', 'Noite'), ('integral', 'Integral')], max_length=10, null=True)),
                ('etapa_ensino', models.CharField(blank=True, choices=[('EI', 'Educação Infantil'), ('EF', 'Ensino Fundamental'), ('EM', 'Ensino Médio')], max_length=2, null=True)),
                ('historico_escolar', models.TextField(blank=True, help_text='Escolas anteriores, anos cursados, aprovação/reprovação.', null=True)),
                ('situacao_matricula', models.CharField(choices=[('ativa', 'Ativa'), ('transferido', 'Transferido'), ('trancado', 'Trancado'), ('egresso', 'Egresso'), ('cancelado', 'Cancelado')], default='ativa', max_length=15)),
                ('data_ingresso', models.DateField(blank=True, null=True)),
                ('data_saida', models.DateField(blank=True, null=True)),
                ('numero_chamada', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dados Escolares',
                'verbose_name_plural': 'Dados Escolares',
            },
        ),
        migrations.CreateModel(
            name='AlunoPessoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_social', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome social (se houver)')),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1, null=True)),
                ('raca_cor', models.CharField(blank=True, choices=[('branca', 'Branca'), ('preta', 'Preta'), ('parda', 'Parda'), ('amarela', 'Amarela'), ('indigena', 'Indígena'), ('nao_informado', 'Prefiro não informar')], max_length=20, null=True, verbose_name='Raça/Cor (autodeclarada)')),
                ('nacionalidade', models.CharField(blank=True, max_length=60, null=True)),
                ('naturalidade_cidade', models.CharField(blank=True, max_length=80, null=True)),
                ('naturalidade_uf', models.CharField(blank=True, choices=[('AC', 'AC'), ('AL', 'AL'), ('AP', 'AP'), ('AM', 'AM'), ('BA', 'BA'), ('CE', 'CE'), ('DF', 'DF'), ('ES', 'ES'), ('GO', 'GO'), ('MA', 'MA'), ('MT', 'MT'), ('MS', 'MS'), ('MG', 'MG'), ('PA', 'PA'), ('PB', 'PB'), ('PR', 'PR'), ('PE', 'PE'), ('PI', 'PI'), ('RJ', 'RJ'), ('RN', 'RN'), ('RS', 'RS'), ('RO', 'RO'), ('RR', 'RR'), ('SC', 'SC'), ('SP', 'SP'), ('SE', 'SE'), ('TO', 'TO')], max_length=2, null=True)),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, validators=[django.core.validators.RegexValidator(message="O CPF deve estar no formato: '123.456.789-00'.", regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='Número do CPF')),
                ('rg_numero', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número do RG')),
                ('rg_orgao_emissor', models.CharField(blank=True, max_length=20, null=True, verbose_name='Órgão emissor do RG')),
                ('certidao_nascimento', models.TextField(blank=True, help_text='Número, livro, folha, cartório, etc.', null=True)),
            ],
            options={
                'verbose_name': 'Dados Pessoais',
                'verbose_name_plural': 'Dados Pessoais',
            },
        ),
        migrations.CreateModel(
            name='AlunoResponsaveis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mae_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome completo da mãe')),
                ('pai_nome', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome completo do pai')),
                ('responsavel_legal_nome', models.CharField(blank=True, max_length=100, null=True)),
                ('telefone_principal', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('telefone_reserva', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')])),
                ('email_responsavel', models.EmailField(blank=True, help_text='Preencha apenas se desejar registrar o e-mail.', max_length=254, null=True)),
                ('guarda_judicial', models.BooleanField(default=False, verbose_name='Guarda judicial?')),
            ],
            options={
                'verbose_name': 'Responsáveis',
                'verbose_name_plural': 'Responsáveis',
            },
        ),
        migrations.CreateModel(
            name='Avaliacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nota', models.FloatField()),
                ('data_fechamento', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Avaliação',
                'verbose_name_plural': 'Avaliação',
            },
        ),
        migrations.CreateModel(
            name='Aviso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200)),
                ('mensagem', models.TextField()),
                ('data_publicacao', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bimestre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50)),
                ('ano_letivo', models.IntegerField()),
                ('data_inicio', models.DateField(blank=True, null=True, verbose_name='Data de Início')),
                ('data_fim', models.DateField(blank=True, null=True, verbose_name='Data de Fim')),
                ('dias_letivo', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Boletim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Calendario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mes', models.CharField(max_length=20)),
                ('dia', models.IntegerField()),
                ('status', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiaLetivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField()),
                ('status', models.CharField(choices=[('L', 'Dia Letivo'), ('F', 'Feriado Docente'), ('FE', 'Feriado'), ('R', 'Recesso'), ('PL', 'Planejamento'), ('AC', 'Atividades Cultural/Letivo'), ('SA', 'Suspensão de Atividades'), ('S', 'Sábado'), ('D', 'Domingo'), ('RPL', 'Replanejamento')], default='L', max_length=3)),
            ],
            options={
                'verbose_name': 'Dia Letivo',
                'verbose_name_plural': 'Dias Letivos',
            },
        ),
        migrations.CreateModel(
            name='DiretorCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=120, verbose_name='Curso')),
                ('instituicao', models.CharField(blank=True, max_length=120, null=True)),
                ('carga_horaria', models.PositiveIntegerField(blank=True, null=True, verbose_name='Carga horária (h)')),
                ('ano', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiretorFormacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=120, verbose_name='Formação')),
                ('instituicao', models.CharField(blank=True, max_length=120, null=True)),
                ('ano', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DiretoriaEnsino',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome do Núcleo educacional')),
                ('endereco', models.CharField(blank=True, max_length=200, null=True, verbose_name='Endereço')),
                ('telefone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')], verbose_name='Telefone')),
                ('criado_em', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'verbose_name': 'Dept. de Educação',
                'verbose_name_plural': 'Dept. de Educação',
            },
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50, unique=True)),
                ('area_conhecimento', models.CharField(choices=[('LINGUAGENS', 'Linguagens'), ('MATEMÁTICA', 'Matemática'), ('CIÊNCIAS HUMANAS', 'Ciências Humanas'), ('CIÊNCIA DA NATUREZA', 'Ciência da Natureza')], default='LINGUAGENS', max_length=30, verbose_name='Área do conhecimento')),
                ('carga_horaria', models.PositiveIntegerField(default=0, verbose_name='Carga horária (horas)')),
            ],
        ),
        migrations.CreateModel(
            name='Escola',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=150, verbose_name='Nome')),
                ('ativa', models.BooleanField(default=True, verbose_name='Ativa')),
                ('telefone', models.CharField(max_length=20, verbose_name='Telefone')),
                ('endereco', models.CharField(max_length=255, verbose_name='Endereço')),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, validators=[django.core.validators.RegexValidator(message='CNPJ deve estar no formato 00.000.000/0000-00 ou apenas dígitos.', regex='^\\d{2}\\.?\\d{3}\\.?\\d{3}/?\\d{4}-?\\d{2}$')], verbose_name='CNPJ')),
                ('cod_cie', models.CharField(blank=True, max_length=20, null=True, verbose_name='Código CIE')),
                ('apm_ativa', models.BooleanField(default=False, verbose_name='APM ativa?')),
                ('ppp_arquivo', models.FileField(blank=True, null=True, upload_to='ppp/', verbose_name='Projeto Político-Pedagógico (PDF)')),
            ],
        ),
        migrations.CreateModel(
            name='EscolaEstruturaFisica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qtd_salas', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Salas (quantidade)')),
                ('tem_cozinha', models.BooleanField(default=False, verbose_name='Cozinha')),
                ('tem_refeitorio', models.BooleanField(default=False, verbose_name='Refeitório')),
                ('area_lazer_m2', models.PositiveIntegerField(blank=True, null=True, verbose_name='Área de lazer (m²)')),
                ('possui_alimentacao_escolar', models.BooleanField(default=False, verbose_name='Alimentação escolar')),
                ('qtd_quadras', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quadras poliesportivas')),
            ],
            options={
                'verbose_name': 'Estrutura física',
                'verbose_name_plural': 'Estrutura física',
            },
        ),
        migrations.CreateModel(
            name='EscolaFuncionarios',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vice_diretor', models.CharField(blank=True, max_length=120, null=True, verbose_name='Vice-diretor(a)')),
                ('coordenador', models.CharField(blank=True, max_length=120, null=True, verbose_name='Coordenador(a)')),
                ('secretario', models.CharField(blank=True, max_length=120, null=True, verbose_name='Secretário(a)')),
                ('qtd_professores', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantidade de professores')),
                ('qtd_alunos', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantidade de alunos')),
                ('qtd_cozinheiras', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Cozinheira(s)')),
                ('qtd_auxiliares_limpeza', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Auxiliar(es) de limpeza')),
            ],
            options={
                'verbose_name': 'Funcionários',
                'verbose_name_plural': 'Funcionários',
            },
        ),
        migrations.CreateModel(
            name='Frequencia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(verbose_name='Data')),
                ('status', models.CharField(choices=[('presente', 'Presente'), ('ausente', 'Ausente'), ('justificado', 'Justificado'), ('nao_letivo', 'Dia Não Letivo')], max_length=20)),
            ],
            options={
                'verbose_name': 'Frequência',
                'verbose_name_plural': 'Frequências',
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('cpf', models.CharField(max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="O CPF deve estar no formato: '123.456.789-00'.", regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('data_nascimento', models.DateField()),
                ('sexo', models.CharField(choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], max_length=10)),
                ('endereco', models.CharField(max_length=200)),
                ('telefone', models.CharField(max_length=20)),
                ('disciplinas', models.ManyToManyField(blank=True, help_text='Selecione as disciplinas que o professor leciona.', related_name='professores_disciplina', to='core.disciplina', verbose_name='Disciplinas')),
            ],
            options={
                'verbose_name': 'Professor',
                'verbose_name_plural': 'Professores',
            },
        ),
        migrations.CreateModel(
            name='Turma',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('ano', models.PositiveIntegerField(verbose_name='Ano')),
                ('codigo', models.CharField(default='', max_length=20)),
                ('tipo_ensino', models.CharField(choices=[('EI', 'Educação Infantil'), ('EF1', 'Ensino Fundamental – Anos Iniciais'), ('EF2', 'Ensino Fundamental – Anos Finais'), ('EM', 'Ensino Médio')], default='EF1', max_length=4)),
                ('sala_identificacao', models.CharField(default='S/N', max_length=50, verbose_name='Sala (nº/identificação)')),
                ('aee', models.BooleanField(default=False, verbose_name='AEE')),
                ('aee_observacoes', models.CharField(blank=True, max_length=255, null=True, verbose_name='Obs. AEE')),
                ('escola', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='turmas', to='core.escola')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_usuario', models.CharField(max_length=50, unique=True, verbose_name='Nome de usuário')),
                ('senha', models.CharField(help_text='Em produção, use django.contrib.auth para gerenciar senhas.', max_length=128, verbose_name='Senha')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome completo')),
                ('cpf', models.CharField(default='000.000.000-00', max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message="O CPF deve estar no formato: '123.456.789-00'.", regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')], verbose_name='CPF')),
                ('data_nascimento', models.DateField(verbose_name='Data de nascimento')),
                ('sexo', models.CharField(blank=True, choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino')], max_length=10, null=True, verbose_name='Sexo')),
                ('endereco', models.CharField(max_length=200, verbose_name='Endereço')),
                ('telefone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="O telefone deve estar no formato: '(XX) XXXXX-XXXX' ou 'XX XXXXX-XXXX'.", regex='^\\(?\\d{2}\\)?\\s?\\d{4,5}-?\\d{4}$')], verbose_name='Telefone')),
            ],
        ),
        migrations.CreateModel(
            name='Diretor',
            fields=[
                ('usuario_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.usuario')),
                ('inicio_no_cargo', models.DateField(blank=True, null=True, verbose_name='Início no cargo')),
                ('efetivo', models.BooleanField(default=False, verbose_name='Efetivo')),
            ],
            options={
                'verbose_name': 'Diretor',
                'verbose_name_plural': 'Diretores',
                'ordering': ['nome'],
            },
            bases=('core.usuario',),
        ),
        migrations.CreateModel(
            name='TurmaHorario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Segunda'), (1, 'Terça'), (2, 'Quarta'), (3, 'Quinta'), (4, 'Sexta'), (5, 'Sábado'), (6, 'Domingo')])),
                ('horario_inicio', models.TimeField()),
                ('horario_fim', models.TimeField()),
                ('turma', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='horarios', to='core.turma')),
            ],
            options={
                'verbose_name': 'Funcionamento da Turma',
                'verbose_name_plural': 'Funcionamento da Turma',
            },
        ),
        migrations.CreateModel(
            name='ProfessorFormacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('formacao', models.CharField(max_length=150, verbose_name='Formação')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formacoes', to='core.professor')),
            ],
            options={
                'verbose_name': 'Formação',
                'verbose_name_plural': 'Formações',
            },
        ),
        migrations.CreateModel(
            name='ProfessorCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=150, verbose_name='Curso de Aperfeiçoamento')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cursos', to='core.professor')),
            ],
            options={
                'verbose_name': 'Curso de Aperfeiçoamento',
                'verbose_name_plural': 'Cursos de Aperfeiçoamento',
            },
        ),
        migrations.AddField(
            model_name='professor',
            name='turmas',
            field=models.ManyToManyField(blank=True, help_text='Selecione as turmas que este professor leciona.', related_name='professores', to='core.turma', verbose_name='Turmas'),
        ),
        migrations.CreateModel(
            name='PeriodoLetivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, verbose_name='Nome')),
                ('tipo', models.CharField(choices=[('ANUAL', 'Anual'), ('SEMESTRAL', 'Semestral'), ('TRIMESTRAL', 'Trimestral'), ('BIMESTRAL', 'Bimestral')], max_length=10, verbose_name='Tipo')),
                ('ano', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900, message='O ano deve ser maior ou igual a 1900.'), django.core.validators.MaxValueValidator(2100, message='O ano deve ser menor ou igual a 2100.')], verbose_name='Ano')),
                ('data_inicio', models.DateField(verbose_name='Data de Início')),
                ('data_fim', models.DateField(verbose_name='Data de Fim')),
                ('ativo', models.BooleanField(default=False, verbose_name='Ativo')),
            ],
            options={
                'verbose_name': 'Período Letivo',
                'verbose_name_plural': 'Períodos Letivos',
                'ordering': ['-ano', 'data_inicio'],
                'indexes': [models.Index(fields=['tipo', 'ano', 'ativo'], name='core_period_tipo_d86349_idx'), models.Index(fields=['ano', 'data_inicio'], name='core_period_ano_d9b726_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='periodoletivo',
            constraint=models.UniqueConstraint(fields=('ano',), name='unique_periodo_letivo_por_ano'),
        ),
        migrations.AddField(
            model_name='frequencia',
            name='aluno',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.aluno'),
        ),
        migrations.AddField(
            model_name='frequencia',
            name='disciplina',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.disciplina'),
        ),
        migrations.AddField(
            model_name='frequencia',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.turma'),
        ),
        migrations.AddField(
            model_name='escolafuncionarios',
            name='escola',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='funcionarios', to='core.escola'),
        ),
        migrations.AddField(
            model_name='escolaestruturafisica',
            name='escola',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='estrutura', to='core.escola'),
        ),
        migrations.AddField(
            model_name='escola',
            name='diretoria_ensino',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.diretoriaensino', verbose_name='Diretoria Regional de Ensino'),
        ),
        migrations.AddField(
            model_name='dialetivo',
            name='periodo_letivo',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dias_letivos', to='core.periodoletivo'),
        ),
        migrations.AlterUniqueTogether(
            name='calendario',
            unique_together={('mes', 'dia')},
        ),
        migrations.AddField(
            model_name='boletim',
            name='aluno',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.aluno'),
        ),
        migrations.AddField(
            model_name='aviso',
            name='autor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='aluno',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avaliacoes', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='bimestre',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.bimestre'),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='disciplina',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.disciplina'),
        ),
        migrations.AddField(
            model_name='avaliacao',
            name='turma',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.turma'),
        ),
        migrations.AddField(
            model_name='alunoresponsaveis',
            name='aluno',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='responsaveis', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='alunopessoal',
            name='aluno',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pessoal', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='alunoescolar',
            name='aluno',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='escolar', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='alunoescolar',
            name='turma_atual',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='alunos_atual', to='core.turma'),
        ),
        migrations.AddField(
            model_name='alunoescolar',
            name='unidade_escolar',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.escola'),
        ),
        migrations.AddField(
            model_name='alunocontato',
            name='aluno',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='contato', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='alunocomplementar',
            name='aluno',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='complementar', to='core.aluno'),
        ),
        migrations.AddField(
            model_name='aluno',
            name='turmas',
            field=models.ManyToManyField(blank=True, help_text='Selecione as turmas deste aluno.', related_name='alunos', to='core.turma', verbose_name='Turmas'),
        ),
        migrations.AddConstraint(
            model_name='turmahorario',
            constraint=models.CheckConstraint(check=models.Q(('horario_inicio__lt', models.F('horario_fim'))), name='chk_turma_horario_intervalo_valido'),
        ),
        migrations.AddConstraint(
            model_name='turmahorario',
            constraint=models.UniqueConstraint(fields=('turma', 'dia_semana'), name='uq_turma_dia_unico'),
        ),
        migrations.AddConstraint(
            model_name='turma',
            constraint=models.UniqueConstraint(fields=('escola', 'ano', 'codigo'), name='uq_turma_escola_ano_codigo'),
        ),
        migrations.AlterUniqueTogether(
            name='frequencia',
            unique_together={('aluno', 'data', 'disciplina')},
        ),
        migrations.AddField(
            model_name='escola',
            name='diretor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.diretor', verbose_name='Diretor Responsável'),
        ),
        migrations.AddField(
            model_name='diretorformacao',
            name='diretor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formacoes', to='core.diretor'),
        ),
        migrations.AddField(
            model_name='diretorcurso',
            name='diretor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cursos', to='core.diretor'),
        ),
        migrations.AlterUniqueTogether(
            name='dialetivo',
            unique_together={('periodo_letivo', 'data')},
        ),
    ]
